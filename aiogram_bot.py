import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

API_TOKEN = 'token'  # !!!!!!!!!!!!TEST BOT

msg = MIMEMultipart()
msg['From'] = "mail"
msg['To'] = "mail"

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

CHECK_LIST = ['–ó–∞–±—ã–ª–∏ –≤–µ—â—å üß≥', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ üí°', '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì', '–ñ–∞–ª–æ–±—ã / –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è üò°',
              '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –æ–Ω–ª–∞–π–Ω üöå']


class TestStates(Helper):
    mode = HelperMode.snake_case

    MAIN_MENU = ListItem()
    COMPLAINT_IN_BOT = ListItem()
    BUS_NUMBER = ListItem()
    LOST_THING = ListItem()
    TEST_STATE_4 = ListItem()
    TEST_STATE_5 = ListItem()


@dp.message_handler(commands='start', state=TestStates.MAIN_MENU)
@dp.message_handler(commands='start')
async def start_cmd_handler(message: types.Message):
    keyboard_markup = types.ReplyKeyboardMarkup(row_width=3)
    # default row_width is 3, so here we can omit it actually
    # kept for clearness

    text_and_data_1 = (
        ('–ó–∞–±—ã–ª–∏ –≤–µ—â—å üß≥', '/lost'),
        ('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ üí°', '/test'),
        ('–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì', '/questions'),
    )
    text_and_data_2 = (('–ñ–∞–ª–æ–±—ã / –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è üò°', '/complaints'),
                       ('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –æ–Ω–ª–∞–π–Ω üöå', '/transport'),)
    # in real life for the callback_data the callback data factory should be used
    # here the raw string is used for the simplicity
    row_btns_1 = (types.KeyboardButton(text, callback_data=data) for text, data in text_and_data_1)

    keyboard_markup.row(*row_btns_1)
    row_btns_2 = (types.KeyboardButton(text, callback_data=data) for text, data in text_and_data_2)
    keyboard_markup.row(*row_btns_2)

    START_MESSAGE = '''–ü—Ä–∏–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞! ü§ü
–Ø, —á–∞—Ç-–±–æ—Ç ¬´–ê–≤—Ç–æ–±–æ—Ç—É—Å¬ª, –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –í–æ—Ä–æ–Ω–µ–∂–∞. –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ –æ–± –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –≥–æ—Ä–æ–¥–∞!

–ù–∞ –¥–∞–Ω–Ω—ã–º –º–æ–º–µ–Ω—Ç —è —É–º–µ—é:
üî∏–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
üîπ–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∂–∞–ª–æ–±—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
üî∏–ü—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–µ—Å—Ç –Ω–∞ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
üîπ–ï—Å–ª–∏ —Ç—ã –∑–∞–±—ã–ª –≤–µ—â—å, —Ç–æ –æ–±—Ä–∞—â–∞–π—Å—è –∫–æ –º–Ω–µ
üî∏–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –æ–Ω–ª–∞–π–Ω –Ω–∞ –∫–∞—Ä—Ç–µ –≥–æ—Ä–æ–¥–∞

–Ø –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç, –Ω–∞–¥–µ—é—Å—å, —Ç—ã –≤–æ –º–Ω–µ —Ä–∞–∑–±–µ—Ä—ë—à—å—Å—è. –ê –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–∏—à–∏ –Ω–∞—à–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ ‚Äî @autobotus_info'''
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(TestStates.all()[3])
    await message.reply(START_MESSAGE, reply_markup=keyboard_markup)


@dp.message_handler(state=TestStates.MAIN_MENU)
async def all_handlers(message: types.Message):
    button_text = message.text
    logger.debug('The answer is %r', button_text)

    if button_text == '–ñ–∞–ª–æ–±—ã / –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è üò°':
        keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
        # default row_width is 3, so here we can omit it actually
        # kept for clearness

        text_and_data_1 = (
            ('10–ê', '10–ê'),
            ('16–í', '16–í'),
            ('20', '20'),
            ('20–ë', '20–ë'),
            ('37', '37'),
        )
        text_and_data_2 = (('50', '50'),
                           ('52–ê–í', '52–ê–í'),
                           ('54', '54'),
                           ('59–ê–°', '59–ê–°'),
                           ('91', '91'),
                           ('120', '120'),)
        # in real life for the callback_data the callback data factory should be used
        # here the raw string is used for the simplicity
        row_btns_1 = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data_1)

        keyboard_markup.row(*row_btns_1)
        row_btns_2 = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data_2)
        keyboard_markup.row(*row_btns_2)
        # in real life for the callback_data the callback data factory should be used
        # here the raw string is used for the simplicity
        message_ = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞'

        await message.reply(message_, reply_markup=keyboard_markup)

    if button_text == '–ó–∞–±—ã–ª–∏ –≤–µ—â—å üß≥':
        keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
        # default row_width is 3, so here we can omit it actually
        # kept for clearness

        text_and_data_1 = (
            ('10–ê', '10–ê'),
            ('16–í', '16–í'),
            ('20', '20'),
            ('20–ë', '20–ë'),
            ('37', '37'),
        )
        text_and_data_2 = (('50', '50'),
                           ('52–ê–í', '52–ê–í'),
                           ('54', '54'),
                           ('59–ê–°', '59–ê–°'),
                           ('91', '91'),
                           ('120', '120'),)
        # in real life for the callback_data the callback data factory should be used
        # here the raw string is used for the simplicity
        row_btns_1 = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data_1)

        keyboard_markup.row(*row_btns_1)
        row_btns_2 = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data_2)
        keyboard_markup.row(*row_btns_2)
        # in real life for the callback_data the callback data factory should be used
        # here the raw string is used for the simplicity
        message_ = '–í –∫–∞–∫–æ–º –º–∞—Ä—à—Ä—É—Ç–µ –í—ã –∑–∞–±—ã–ª–∏ –≤–µ—â—å?'
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(TestStates.all()[2])
        await message.reply(message_, reply_markup=keyboard_markup)

    if button_text == '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì':
        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        # default row_width is 3, so here we can omit it actually
        # kept for clearness
        text_and_data_1 = (
            ('1', '/question1'),
            ('2', '/question2'),
            ('3', '/question3'),
            ('4', '/question4'),
            ('5', '/question5')
        )
        row_btns_1 = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data_1)
        keyboard_markup.row(*row_btns_1)
        # in real life for the callback_data the callback data factory should be used
        # here the raw string is used for the simplicity
        message_ = '''–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:
1Ô∏è‚É£ –ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞?
2Ô∏è‚É£ –ü–æ—á–µ–º—É –Ω—É–∂–Ω–æ –Ω–æ—Å–∏—Ç—å –º–∞—Å–∫—É –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ?
3Ô∏è‚É£ –ö–æ–≥–¥–∞ –≤ –í–æ—Ä–æ–Ω–µ–∂–µ –∑–∞–º–µ–Ω—è—Ç ¬´–º–∞—Ä—à—Ä—É—Ç–∫–∏¬ª –Ω–∞ –∞–≤—Ç–æ–±—É—Å—ã?
4Ô∏è‚É£ –ö–∞–∫ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É –≤–æ–¥–∏—Ç–µ–ª—è/–∞–≤—Ç–æ–±—É—Å–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é?
5Ô∏è‚É£ –ó–∞—á–µ–º –Ω—É–∂–Ω—ã –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª–æ—Å—ã –¥–ª—è –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞?'''

        await message.reply(message_, reply_markup=keyboard_markup)

    if button_text == '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ üí°':
        keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
        keyboard_markup.add(
            types.InlineKeyboardButton('–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç',
                                       url='https://vk.com/app7385430#forms/40243'),
        )

        message_ = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ ‚Äî –ª–µ–≥–∫–æ! –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–π–¥–∏—Ç–µ \
–Ω–∞—à –æ–ø—Ä–æ—Å:'
        await message.reply(message_, reply_markup=keyboard_markup, )

    if button_text == '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –æ–Ω–ª–∞–π–Ω üöå':
        keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
        keyboard_markup.add(
            types.InlineKeyboardButton('–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã',
                                       url='https://yandex.ru/maps/193/voronezh/?ll=39.251930%2C51.667816&z=12'),
            types.InlineKeyboardButton('2–ì–ò–°',
                                       url='https://2gis.ru/voronezh'),
            types.InlineKeyboardButton('BusTime',
                                       url='https://www.bustime.ru/voronezh/'),
            types.InlineKeyboardButton('VrnBus',
                                       url='https://vrnbus.herokuapp.com/'),
        )

        message_ = '–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞—à–∏–º–∏ –∫–æ–ª–ª–µ–≥–∞–º–∏. –î–≤–∏–∂–µ–Ω–∏–µ \
–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö. \
–û–Ω–∏ —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ Android –∏ –Ω–∞ iOS ‚úåüèª'
        await message.reply(message_, reply_markup=keyboard_markup, )


@dp.callback_query_handler(text='/question1', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='/question2', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='/question3', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='/question4', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='/question5', state=TestStates.MAIN_MENU)
async def complaint(query: types.CallbackQuery):
    answer_data = query.data
    # always answer callback queries, even if you have nothing to say
    if answer_data == '/question1':
        text = '''1Ô∏è‚É£ –ë–µ–∑–Ω–∞–ª–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ‚Äî 21 —Ä—É–±.\n–ù–∞–ª–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ‚Äî 23 —Ä—É–±.'''
    if answer_data == '/question2':
        text = '2Ô∏è‚É£ –ú–∞—Å–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –≤ \
–í–æ—Ä–æ–Ω–µ–∂—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–≤–µ–ª–∏ 12 –º–∞—è 2020 –≥–æ–¥–∞. –ù–∞—Ä—É—à–∏—Ç–µ–ª—è–º –≥—Ä–æ–∑–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å \
–ø–æ —Å—Ç. 20.6.1 –ö–æ–ê–ü –†–§. –®—Ç—Ä–∞—Ñ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç 1 —Ç—ã—Å. –¥–æ 30 —Ç—ã—Å. —Ä—É–±–ª–µ–π.'
    if answer_data == '/question3':
        text = '3Ô∏è‚É£ –í –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –∏–¥—ë—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–∫—É–ø–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ã. \
–ü–æ—ç—Ç–æ–º—É —Å–æ–≤–µ—Ç—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É!'
    if answer_data == '/question4':
        text = '4Ô∏è‚É£ –í –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è ¬´–ñ–∞–ª–æ–±—ã/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è¬ª. –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–≤–æ–π –º–∞—Ä—à—Ä—É—Ç, –Ω–∞—à –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–∞–º \
–∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞. –ê —Ç–∞–∫–∂–µ –º—ã —Å–º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É üòâ'
    if answer_data == '/question5':
        text = '5Ô∏è‚É£ ¬´–í—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª–æ—Å—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –ø—Ä–æ–≤–æ–∑–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É–ª–∏—Ü. –ê–≤—Ç–æ–±—É—Å—ã –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç –Ω–∞—Å—Ç–æ–ª—å–∫–æ \
–∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –ø—Ä–æ–±–æ–∫ –∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–æ–∑–∏—Ç—å –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–∂–∞–Ω –∑–∞ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –≤—Ä–µ–º—è¬ª, ‚Äî —Ä–∞—Å—Å–∫–∞–∑–∞–ª –º—ç—Ä –≥–æ—Ä–æ–¥–∞\
 –í–∞–¥–∏–º –ö—Å—Ç–µ–Ω–∏–Ω.'
    await bot.send_message(query.from_user.id, text)


# Use multiple registrators. Handler will execute when one of the filters is OK
@dp.callback_query_handler(text='10–ê', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='16–í', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='20', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='20–ë', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='37', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='50', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='52–ê–í', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='54', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='59–ê–°', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='91', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='120', state=TestStates.MAIN_MENU)
async def choose_bus(query: types.CallbackQuery):
    answer_data = query.data
    # always answer callback queries, even if you have nothing to say
    await query.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {answer_data!r}')
    text = '–ï—Å–ª–∏ —É –í–∞—Å –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏—è –∏–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –∏–¥–µ–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞. \
–¢–æ –í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –∫–æ–º–ø–∞–Ω–∏—é (–Ω–∞–∂–º–∏—Ç–µ ¬´–ö–æ–Ω—Ç–∞–∫—Ç—ã¬ª) –∏–ª–∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –∑–∞ –í–∞—Å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É \
–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞ (–Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∫–∞¬ª)üöå'
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    # default row_width is 3, so here we can omit it actually
    # kept for clearness
    text_and_data_1 = (
        ('–û—Ç–ø—Ä–∞–≤–∫–∞', '/complaint_in_bot'),
        ('–ö–æ–Ω—Ç–∞–∫—Ç—ã', '/complaint_other')
    )
    row_btns_1 = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data_1)

    keyboard_markup.row(*row_btns_1)

    await bot.send_message(query.from_user.id, text, reply_markup=keyboard_markup)


@dp.callback_query_handler(text='10–ê', state=TestStates.LOST_THING)
@dp.callback_query_handler(text='16–í', state=TestStates.LOST_THING)
@dp.callback_query_handler(text='20', state=TestStates.LOST_THING)
@dp.callback_query_handler(text='20–ë', state=TestStates.LOST_THING)
@dp.callback_query_handler(text='37', state=TestStates.LOST_THING)
@dp.callback_query_handler(text='50', state=TestStates.LOST_THING)
@dp.callback_query_handler(text='52–ê–í', state=TestStates.LOST_THING)
@dp.callback_query_handler(text='54', state=TestStates.LOST_THING)
@dp.callback_query_handler(text='59–ê–°', state=TestStates.LOST_THING)
@dp.callback_query_handler(text='91', state=TestStates.LOST_THING)
@dp.callback_query_handler(text='120', state=TestStates.LOST_THING)
async def choose_bus(query: types.CallbackQuery):
    answer_data = query.data
    # always answer callback queries, even if you have nothing to say
    await query.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {answer_data!r}')
    text = '–í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –∫–æ–º–ø–∞–Ω–∏—é (–Ω–∞–∂–º–∏—Ç–µ ¬´–ö–æ–Ω—Ç–∞–∫—Ç—ã¬ª) –∏–ª–∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º \
–∑–∞ –í–∞—Å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞ (–Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∫–∞¬ª) üß≥'
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    # default row_width is 3, so here we can omit it actually
    # kept for clearness
    text_and_data_1 = (
        ('–û—Ç–ø—Ä–∞–≤–∫–∞', '/complaint_in_bot'),
        ('–ö–æ–Ω—Ç–∞–∫—Ç—ã', '/complaint_other')
    )
    row_btns_1 = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data_1)

    keyboard_markup.row(*row_btns_1)

    await bot.send_message(query.from_user.id, text, reply_markup=keyboard_markup)


@dp.callback_query_handler(text='/complaint_in_bot', state=TestStates.LOST_THING)
@dp.callback_query_handler(text='/complaint_other', state=TestStates.LOST_THING)
async def complaint(query: types.CallbackQuery):
    answer_data = query.data
    # always answer callback queries, even if you have nothing to say
    if answer_data == '/complaint_other':
        text = '''–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞:
    +7 (473) 259-75-92
    +7 (473) 232-02-65
    patp1vrn@yandex.ru'''
        await bot.send_message(query.from_user.id, text)
    if answer_data == '/complaint_in_bot':
        message_ = '''–û—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º):
1‚É£ –ù–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞
2‚É£ –ì–æ—Å–Ω–æ–º–µ—Ä (–µ—Å–ª–∏ –ø–æ–º–Ω–∏—Ç–µ)
3‚É£ –í –∫–∞–∫–æ–π —á–∞—Å—Ç–∏ –∞–≤—Ç–æ–±—É—Å–∞
4‚É£ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–µ—â–∏
5‚É£ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ—á—Ç–∞'''
        state = dp.current_state(user=query.from_user.id)
        await state.set_state(TestStates.all()[2])
        await bot.send_message(query.from_user.id, message_)


@dp.callback_query_handler(text='/complaint_in_bot', state=TestStates.MAIN_MENU)
@dp.callback_query_handler(text='/complaint_other', state=TestStates.MAIN_MENU)
async def complaint(query: types.CallbackQuery):
    answer_data = query.data
    # always answer callback queries, even if you have nothing to say
    if answer_data == '/complaint_other':
        text = '''–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞:
    +7 (473) 259-75-92
    +7 (473) 232-02-65
    patp1vrn@yandex.ru'''
        await bot.send_message(query.from_user.id, text)
    if answer_data == '/complaint_in_bot':
        state = dp.current_state(user=query.from_user.id)
        message_ = '''–û—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º):
1‚É£ –ù–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞
2‚É£ –ì–æ—Å–Ω–æ–º–µ—Ä (–µ—Å–ª–∏ –ø–æ–º–Ω–∏—Ç–µ)
3‚É£ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
4‚É£ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ—á—Ç–∞
'''
        await state.set_state(TestStates.all()[1])
        await bot.send_message(query.from_user.id, message_)


@dp.message_handler(state=TestStates.COMPLAINT_IN_BOT)
async def complaint_text(message: types.Message):
    if message.text not in CHECK_LIST:
        msg['Subject'] = '–ñ–∞–ª–æ–±–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ [—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ telegram]'
        msg.attach(MIMEText(message.text, 'plain'))
        smtpObj = smtplib.SMTP('smtp.gmail.com', 587)
        smtpObj.starttls()
        smtpObj.login('login', 'parol')
        smtpObj.sendmail(msg['From'], msg['To'], msg.as_string())
        await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(TestStates.all()[3])
    else:
        await bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ "–ñ–∞–ª–æ–±—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É')
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(TestStates.all()[3])


@dp.message_handler(state=TestStates.LOST_THING)
async def complaint_text(message: types.Message):
    if message.text not in CHECK_LIST:
        msg['Subject'] = '–ó–∞–±—ã–ª–∏ –≤–µ—â—å [—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ telegram]'
        msg.attach(MIMEText(message.text, 'plain'))
        smtpObj = smtplib.SMTP('smtp.gmail.com', 587)
        smtpObj.starttls()
        smtpObj.login('login', 'parol')
        smtpObj.sendmail(msg['From'], msg['To'], msg.as_string())
        await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏')
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(TestStates.all()[3])
    else:
        await bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ "–ó–∞–±—ã–ª–∏ –≤–µ—â—å" –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É')
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(TestStates.all()[3])


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_shutdown=shutdown)
